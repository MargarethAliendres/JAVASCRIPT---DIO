 Algoritmo "PROCEDIMENTOS"    //PROCEDIMENTO NAO TEM RETORNO

  VAR
  
  resultado: inteiro    //variavel global
                                    //AQUI NAO COLOCA O TIPO DA FUNÇAO
  procedimento somar (i, j : inteiro)     //variavel local  // procedimento nao tem retorno

  inicio
  
  resultado <- i+j

  fimprocedimento

  inicio
  
  somar (10,20)                         //passagem de parametro
  escreval(resultado)
  

 fimalgoritmo



============================================================================================================



 Algoritmo "FUNÇÃO"            // A FUNÇÃO TEM RETORNO

  VAR
                            //A DIFERENÇA É COLOCAR O TIPO DA FUNÇAO
 funcao somar (i, j: inteiro): inteiro            // A FUNÇÃO TEM RETORNO
   inicio
     retorne i + j
 fimfuncao


  inicio
    escreval(somar(10,20))

  fimalgoritmo



EX: 2           

  VAR

 funcao somar (i, j: inteiro): inteiro            // A FUNÇÃO TEM RETORNO
   inicio
     retorne i + j
 fimfuncao

  funcao testar (): inteiro                   //sem valor
    retorne (somar(50,50) + 40)             //uma função chamando outra função
  fimfuncao

   inicio
    escreval(somar(10,20))
    escreval(testar())

fimalgoritmo

===========================================================================================================
          Algoritmo "FUNÇAO/PROCEDIMENTO"  -  (EX TRIANGULO)

       //   c/retorno  sem retorno
     //É MESMO QUE METÓDO  A FUNÇÃO TEM RETORNO   PODE OU NAO TER RETORNO

var  //
   //variaveis globais, nao vai precisar passar parametros p/ as funções/procedimento e podem ser usadas nestes.
   lado1, lado2, lado3: inteiro
   //so vai ler dados, nao tem resposta, nao tem retorno
  procedimento lerDados ()
    inicio  //{
   //entrada de dados
      escreval ("lado1: ")
        leia(lado1)
      escreval ("lado2: ")
        leia(lado2)
      escreval ("lado3: ")
        leia(lado3)
  fimprocedimento

  funcao verificarIntegridadeTriangulo(): logico
     inicio //{
      se (lado1> lado2 +lado3) OU (lado2> lado1+lado3) OU ( lado3>lado1+lado2) entao
       retorne falso
      senao
       retorne verdadeiro
     fimse
  fimfuncao

  funcao verificarTipotriangulo():caractere
      inicio  //{
      se (lado1 = lado2) E (lado2=lado3) entao
      retorne "Equilatero"
      senao
      se (lado1 = lado2 ) OU (lado2 = lado3) OU (lado1=lado3) entao
      retorne "isoceles"
      senao
      retorne "escaleno"

      fimse
      fimse
  fimfuncao

inicio    //PUBLIC STATIC VOID MAIN
        //entrada de dados  ////processamento

  lerDados()                                    //PROGRAMA PRINCIPAL
  se verificarIntegridadeTriangulo() entao
    escreval( verificarTipotriangulo())
  senao
     escreval("não e triangulo")
  fimse

fimalgoritmo


===========================================================================================================

Algoritmo "FUNÇAO/PROCEDIMENTO"  // CADASTRO DE CLIENTE

var

opcaoMenu: caractere
Clientes: vetor[1..5] de caractere

 procedimento MostrarMenu()
  inicio  //{
      escreval ("1- Cadastrar")
      escreval ("2- Pesquisar")
      escreval ("3- Exlcuir")
      leia(opcaoMenu)
fimprocedimento

procedimento Cadastrar()
     var                   //variavel local  para prencher cliente automaticamente
     i : inteiro

     inicio  //{
     para i de 1 ate 5 faca
        se Clientes[i] = "" entao      //  " " significa vazio
           escreval("Informe o nome do cliente")
           leia(Clientes[i])
        fimse
     fimpara
fimprocedimento

procedimento Pesquisar()
      var        //variavel local  para prencher cliente automaticamente uso com vetor
     i: inteiro
     nomeaPesquisar: caractere
     indiceSucesso: inteiro

      inicio  //{
         escreval ("Informe o nome do cliente a pesquisar")
            leia(nomeaPesquisar)
          
      indiceSucesso <- -1      // popular

      para i de 1 ate 5 faca
        se Clientes[i] = nomeaPesquisar  entao
            indiceSucesso <- i
            interrompa      //interromper o para
        fimse
      fimpara
      
        se indiceSucesso = -1 entao
          escreval ("Cliente nao encontrado")
        senao
          escreval ("cliente encontrado na posição", indiceSucesso )
        fimse
fimprocedimento

procedimento Excluir()
    var                                 //variavel local  para prencher cliente automaticamente
    indicedeExclusao: inteiro

  inicio  //{

         escreval("Informe o indice a excluir")
           leia(indicedeExclusao)
        se (indicedeExclusao > 5) OU (indicedeExclusao < 1) entao   // esse 5 e o maximo do vetor colocado acima no programa
          escreval ("Indice Inválido")
        senao
           Clientes[indicedeExclusao] <- ""  //agora excluir, o cliente na posição rece "" vazio, dai foi excluido

       fimse
fimprocedimento


inicio    //PUBLIC STATIC VOID MAIN                    programa principal
        //{
   repita
       MostrarMenu ()
         escolha opcaoMenu
            caso "1"
            Cadastrar()
            caso "2"
            Pesquisar()
            caso "3"
             Excluir()
           outrocaso
             escreval("opção invalida")
         fimescolha
    ate opcaoMenu = "4"                   //saida do repita

fimalgoritmo

===========================================================================================================

                                                         
Algoritmo "FUNÇAO/PROCEDIMENTO"  // GABARITO PROVA


var  //

 gabarito: vetor [1..10] de caractere
 opcaoMenu: caractere
 notaFinal: inteiro

 procedimento MostrarMenu()
      inicio
        escreval ("1 - Cadastrar gabarito")
        escreval ("2 - Cadastrar prova")
        escreval ("3 - Sair")
        leia(opcaoMenu)
 fimprocedimento

  procedimento CadastrarGabarito()
       Var                                       //procedimento
       i:inteiro

      inicio
        para i de 1 ate 10 faca
          escreval("Informe a resposta do gabarito", i)
          leia(gabarito[i])
        fimpara
   fimprocedimento


   funcao CadastrarProva(): inteiro                         //funcao   //
       Var
       i, nota:inteiro
       resposta: caractere
      inicio
      nota <- 0
        para i de 1 ate 10 faca
              escreval("Informe a resposta da questao", i)
              leia(resposta)
          se resposta = gabarito[i] entao
              nota <- nota + 1   //flag de saida
          fimse
          retorne nota
       fimpara
 fimfuncao

 funcao VerificarSituacao(nota: inteiro): literal      //funcao
      inicio
        se nota >= 7 entao
          retorne "aprovado"
        senao
          retorne "reprovado"
        fimse
 fimfuncao

inicio    //PUBLIC STATIC VOID MAIN

repita

     MostrarMenu()

     escolha opcaoMenu
         caso "1"
          CadastrarGabarito()
        caso "2"
          notaFinal <- CadastrarProva()
            escreval ( verificarSituacao(notaFinal))
        outrocaso
          escreval(" opção invalida")
     fimescolha
ate opcaoMenu = "3"

fimalgoritmo